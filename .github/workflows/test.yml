name: Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Prepare environment
      run: sudo apt-get install -y catch2 lcov

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DENABLE_TESTING=ON -DENABLE_COVERAGE=ON

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    # - name: Configure build
    #   working-directory: ${{github.workspace}}
      # env:
      #   CXX: ${{matrix.cxx}}
      #   CXXFLAGS: ${{matrix.cxxflags}}
      # Note: $GITHUB_WORKSPACE is distinct from ${{runner.workspace}}.
      #       This is important
      # run: |
      #   cmake -Bbuild ${{github.workspace}}/build  \
      #         -DCMAKE_BUILD_TYPE=${{env.build_type}} \
      #         -DENABLE_TESTING=ON \
      #         -DENABLE_COVERAGE=ON 

    - name: Base coverage
      working-directory: ${{github.workspace}}
      # Generate initial coverage information
      run: lcov -b . -c -i -d ./build -o .coverage.base

    - name: Test
      working-directory: ${{github.workspace}}/build/tests
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      # run: ./unit_tests

    - name: Coverage
      # https://swarminglogic.com/scribble/2014_05_lcov
      # Generate coverage based on executed tests
      # Merge coverage tracefiles
      # Filtering, extracting project files
      # Filtering, removing test-files
      # show coverage
      run: | 
        lcov -b . -c -d ./build -o .coverage.run 
        lcov -a .coverage.base -a .coverage.run  -o .coverage.total
        lcov -e .coverage.total "`pwd`/*" -o .coverage.total.filtered
        lcov -r .coverage.total.filtered '*/tests/*' -o .coverage.total.filtered
        lcov --list .coverage.total.filtered

      # working-directory: ${{github.workspace}}/build/tests
      # run: lcov --directory . --capture --output-file coverage.info && lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' '*/tests/*' --output-file coverage.info && lcov --list coverage.info
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3